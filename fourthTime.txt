Number类的成员方法
1、xxxValue():将number对象转换为xxx数据类型的值并返回。
这个方法是Number对象调用方法返回的原始数据类型的值转换。
语法：
这是每个原始数据类型一个单独的方法：
byte byteValue()
short shortValue()
int intValue()
long longValue()
float floatvalue()
double doubleValue()
正确的使用方法如下：
demo:
public class Test()　{

	public static void main(String args[]) {
		Integer x = 5;
		//Returns byte primitive data type
		System.out.println(x.byteValue());
	}
}



<----------开始------>
一些疑问：
1、print和println的区别:
println会在下次打印是换行
print不会换行 会在上次打印终止的地方继续打印

2、int和integer的区别：
第一：int 是前者而integer 是后者（也就是一个类）；因此在类进行初始化时int类的变量初始为0.而Integer的变量则初始化为null.
第二：初始化时，int i=1;而Integer i = new Integer(1);要把Integer当成一个类看待。由于有了自动装箱和拆箱，也可使用Integer i= 1;
第三：int是一个基本数据类型，但是Integer定了很多转换方法。类似的还有：float Float，double Double，string String，



他们之间的关系是比较微妙的：
1.int是基本数据类型。
2.Integer是int的封装类。
3.int和Integer都可以表示某一个数值。
4.int和Integer不能够互用，因为他们是两种不同的数据类型。
举例说明：
ArrayList al = new ArrayList();
int n =10;
Integer nI = new Interger(n);
al.add(n);//不可以
al.add(nI);//可以
总而言之：如果我们定义一个int类型的数，只是用来进行一些加减乘除的运算or作为参数进行传递，那么就可以直接声明为int基本数据类型，但如果要像
对象一样来进行处理，那么就要用Integer来声明一个对象，因为java是面向对象的语言

Java中的自动装箱和自动拆箱问题：
1、自动装箱就可以简单的理解为将基本数据类型封装为对象类型，来符合java的面向对象;
	//声明一个Integer对象
	Integer num = 10;
	//以上的声明就是用到了自动的装箱：解析为
	Integer num = new Integer(10);
2、自动装箱：故名思议就是将对象重新转化为基本数据类型
	//装箱
	Integer num = 10;
	//拆箱
	int num1 = num
	
	Integer num = 10;
	//进行计算时隐含的有自动拆箱
	System.out.print(num--);
<----------结束------>

Java Charactor类：
使用字符时，我们通常使用的是内置数据类型char。然而，在实际开发过程中，我们经常会遇到需要使用对象，而不是内置数据类型的情况。
java为内置数据类型char提供了包装类Character类。
用Character类创建对象后这个对象才能是用Charactor提供了一系列的方法。
在某些情况下，Java编译器会自动创建一个Character对象。
例如，将一个char类型的参数传递给需要一个Character类型参数的方法时，那么编译器会自动地将char类型参数转换为Character对象。 这种特征称为装箱，反过来称为拆箱。

Character方法：
isLetter():是否是一个字母
isDigit():是否是一个数字字符
isWhitespace():是否是空格
isLowerCase():是否是小写字母
isUpperCase():是否是大写字母
toUpperCase():指定字母大写形式
toLowerCase():指定字母的小写形式
toString():返回字符的字符串形式，字符串的长度仅为1.

Java String类：
没有string数据类型
String属于一个类.
定义为数据类型是不能使用类提供的方法的。只有定义为类的时候才能使用类提供的方法。方法首字母小写其他首字母大写。
创建字符串的正确姿势是：String greeting = "Hello World!"
String类有11中构建的方式:
第一种：用字符数组参数构建字符串
public class StringDemo{
	
	public static void main(String args[]) {
		char [] helloArray = {'h','e','l','l','o'};
		String helloString = new String(helloArray);
		System.out.println( helloString );
	}
}
<----修改String的方法开始----->
String类一旦创建，如果需要修改，需要使用StringBuffer和StringBuilder类。使用StringBuffer和StringBuilder类的对象能够被多次修改，并且不会产生新的未使用的对象。
多数情况下建议使用StringBuilder类，因为StringBuilder类有速度优势。但是StringBuilder没有StringBuffer类安全。
如果应用程序要求线程安全的情况下，则必须使用StringBuffer类。
StringBuffer类支持的主要方法：
1、public StringBuffer append(String s):将指定的字符串追加到此字符序列。
2、public StringBuffer reverse():将此字符序列用其反转形式取代。
3、public delete(int start,int end):移除此序列的字符串中的字符。
4、public insert(int offset,int i):将int参数的字符串表示形式插入此序列中。
5、replace(int start,int end,String str):使用定String中的字符串替换词序列中的子字符串中的字符。
<----修改String的方法结束----->
第二种：字符串长度
public class StringDemo{
	
	public static void main(String args[]) {
		String palindrome = "Do\'t saw I was Tod.";
		int len = palindrome.length();
		System.out.println("String Length is : " + len );
	}
}
第三种：连接字符串
	string1.concat(string2);返回string2连接string1的新字符串。也可以对字符串常量使用concat()方法。
	例如："My name is ".concat("Zara");
	更常用的是用"+"操作符来连接字符串，如：
	"Hello," + " World!";
	例子：
	public class StringDemo{
		public static void main(String args[]) {
		String string1 = "saw I was";
		System.out.println("Dot " + String1 + " Tod" );
		}
	}
	
	
	