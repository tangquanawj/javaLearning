正则表达式：
// 反斜杠

/t 间隔
/n 换行
/r 回车
/d 数字 等价于[0-9]
/D 非数字 等价于[^0-9]
/s 空白符号 [/t/n/x0b/f/r]
/S 非空白符号 [^/t/n/x0b/f/r]
/w 单独字符 [a-zA-Z_0-9]
/W 非单独字符 [^a-zA-Z_0-9]
/f 换页符
/e Escape
/b 一个单词的边界
/B 一个非单词的边界
/G 前一个匹配的结束

^限制开头
^java 条件限制为以java为开头字符
$为限制结尾
java$ 条件限制为以java为结尾字符
. 条件限制除/n以外任意一个单独字符
java.. 条件限制为java后除换行外任意两个字符

加入特定限制条件[]
[a-z]	条件限制在小写a到z范围中一个字符
[A-Z] 	条件限制在大写A-Z范围中一个字符
[a-zA-Z] 条件限制在小写字母或大写字母范围中一个字符
[0-9]	条件限制在0-9范围中一个字符
[0-9a-z] 条件限制在0-9或a-z之间的一个字符
[0-9[a-z]]	条件限制在小写0-9或a to a范围中一个字符(交集)

[]中加入^后加再次限制条件[^]
[^a-z]	条件限制在非小写a to z范围一个字符
[^A-Z]	条件限制在非大写A to Z范围中一个字符
[^a-zA-Z]	条件限制在非小写a to z或大写A to Z范围中一个字符
[^0-9]	条件限制在非小写0-9范围中的一个字符
[^0-9a-z]	条件限制在非小写0-9或a to z范围中一个字符
[^0-9[a-z]]	条件限制在非0-9或a-z范围中一个字符(交集)

在限制条件为特定字符出现0次以上时，可以使用*。
J*	0个以上J
.*	0个以上任意字符
J.*D J与D之间0个以上任意字符

在限制条件为特定字符出现一次以上时，可以使用 +
J+ 一个以上J
.+	一个以上任意字符
J.+D	J与D之间一个以上任意字符

在限制条件为特定字符出现有0或1次以上时，可以使用？
JA？	J或JA出现

限制为连续出现指定次数字符{a}
J{2} JJ
J{3} JJJ
文字a个以上时，如：
J{3,} JJJ,JJJJ,JJJJJ,(3个以上J并存)
a个J以上，b个J以下{a,b}
J{3,5} JJJ或JJJJ或JJJJJ
两者取一 |
java|Hello java或Hello

()中规定一个组合类型
比如我查询<a href=/"index.html/">index</a>中<a href></a>间的数据，
可以写作<a.*href=/".*"/>(.+?)</a>
在使用Pattern.compile函数时，可以加入控制正则表达式的匹配行为的参数：
Pattern pattern.compile(String regex,int flag)
flag的取值范围如下:
Pattern.CANON_EQ 
当且仅当两个字符的“正规分解”都完全相同的情况下，才认定匹配。
Pattern.CASE_INSENSITIVE(?i) 默认情况下，大小写不敏感的匹配只适用于US-ASCII字符集。这个标志能让表达式
忽略大小写进行匹配。要想对Unicode字符进行大小不敏感的匹配，值要将UNICODE_CASE与这个标志合起来就行了。
Pattern.COMMENTS(?s) 在这种模式下，表达式'.'可以匹配任意字符，包括表示一行的结束符。默认情况下，表达式""
'.'不匹配行的结束符。
Pattern.MULTILINE
(?m)     在这种模式下，'^'和'$'分别匹配一行的开始和结束。此外，'^'仍然匹配字符串的开始，'$'也匹配字符串的结束。默认情况下，这两个表达式仅仅匹配字符串的开始和结束。
Pattern.UNICODE_CASE
(?u)     在这个模式下，如果你还启用了CASE_INSENSITIVE标志，那么它会对Unicode字符进行大小写不明感的匹配。默认情况下，大小写不敏感的匹配只适用于US-ASCII字符集。
Pattern.UNIX_LINES(?d)     在这个模式下，只有'/n'才被认作一行的中止，并且与'.'，'^'，以及'$'进行匹配。


下面是几个简单的java正则用例：
比如，在字符串包含验证时

//查找以java开头，任意结尾的字符串
Pattern pattern = Pattern.compile("java.*");
Matcher matcher = pattern.matcher("java不是人");
boolean b = matcher.matches();
//条件满足时，返回true，否则返回false
System.out.println(b);

//以多条件分割字符串时
Pattern pattern = Pattern.complie("[,|]+");
String[] str = pattern.split("Java Hello World Java,Hello,,World|Sun");
for (int i=0;i<str.length;i++){
	System.out.println(strs[i]);
}
这个例子中的正则表达式看不懂。

//文件替换(首次出现字符)
Pattern pattern = Pattern.compile("正则表达式");
Matcher matcher = pattern.matcher("正则表达式 Hello World,正则表达式 Hello World");
	<*替换第一个符合正则的数据*>
System.out.println(matcher.replaceFirst("Java"));

//文字替换(全部)
Pattern pattern = Pattern.complie("正则表达式");
Matcher matcher = pattern.matcher("正则表达式,正则表达式,正则表达式");
System.out.println(matcher.replaceAll("First"));

//文字替换(置换字符)
Pattern pattern = Pattern.compile("正则表达式");
Matcher matcher = pattern.matcher("正则表达式，正则表达式，正则表达式");
StringBuffer sbr = new StringBuffer();
while(match.find()){
	matcher.appendReplacement(sbr,"Java");
}
matcher.appendTail(sbr);
System.out.println(sbr.toString());

验证是否为邮箱地址

String str = "tangquanawj@qq.com.cn";
Pattern pattern = Pattern.compile();
Matcher matcher = pattern.matcher(Str);
System.out.println(matcher.matches());




