final 
1、用来修饰变量，可以用来修饰变量、方法和类。用关键词final修饰的域成为最终域。用final关键字修饰的
变量一经赋值，就不能改变，也称为修饰的标识为常量。如果一个类的域被关键字final修饰，他的取值在整个执行
过程中不会改变。
2、用来修饰类。如果整个类都是final，就表明自己不希望从这个类继承。

Java运算符：
1、算术运算符
	+ - * / % ++ --
	
2、关系运算符
	==检查两个操作数的值是否相等，如果相等则条件为真
	!=检查如果两个操作数的值是否相等，如果值不相等则条件为真
	> 检查左操作数的值是否大于有操作数的值，如果是条件为真
	< 与上面相反
	>=检查左操作数的值是否大于或等于右操作数的值，如果是条件为真
	<=检查左操作数的值是否小于或等于有操作数的值，如果是条件为真
	通过关系运算符判断后的值是boolean类型，只有true和false两种。
	
3、位运算符
	& ：按位与
	| ：按位或
	^ ：按位异或
	~ ：按位补运算符翻转操作符的每一位（就是取反运算符）
	<<: 按位循环左移运算符（a<<2 按位左移两位）
	>>: 按位循环右移运算符 (a>>2 按位右移两位)
	>>>:按位右移补零操作符（不循环）
4、逻辑运算符
	&&：逻辑与
	||:逻辑或
	！：逻辑非
5、赋值运算符
	=:简答的赋值运算符，将右操作数的值赋给左侧操作数
	+=:加和赋值操作符，将左操作数和右操作数相加赋值给左操作数
	-=：减和赋值操作符，它把左操作数和右操作数相减再赋给左操作数
	*=：乘和赋值操作符，它把左操作数和右操作数相乘再赋给左操作数
	/=:除和赋值操作符，它把左操作数和右操作数相除赋值给左操作数
	%=：取膜赋值操作符，他把左操作数和右操作数相取膜赋值给左操作数
	<<=:左移位赋值操作符
	>>=:右移位赋值操作符
	&=:按位与赋值运算符
	^=:按位抑或赋值操作符
	|=：按位与赋值操作符
6、其他运算符
	条件运算符：(a == 1) ? 20:30
		如果条件为真，则将20赋值给a
		如果条件为假，则将30赋值给a
	instanceOf运算符：主要是用来操作对象。用于操作对象实例，检查该对象是否是一个特定类型
		如果运算符左侧变量所指的对象，是操作符右侧类或接口的一个对象，那么结果为真。
		String name = 'James';
		boolean result = name instanceof String; // 由于name是Strine类型，所以返回真true
		
		
运算符优先级的问题：略

Java循环结构：
	有三种循环结构：while结构，do...while结构，for循环结构
	while(布尔表达式) {
	}
	do {
	
	}while(布尔表达式);
	区别：对于while语句而言，如果不满足条件，则不能进入循环。但有时候我们需要即使不满足条件，也至少执行一次。
	do…while循环和while循环相似，不同的是，do…while循环至少会执行一次。

	for循环结构
	
Java增强型for循环：
	java5引入了一种主要用于数组的增强型for循环。
	java增强for循环语法格式如下：
	for(声明语句 : 表达式)
	{
		//代码句子
	}
	声明语句：声明新的局部变量，该变量的类型必须和数组元素的类型匹配。其作用域限定在循环语句内
	表达式：表达式是要访问的数组名，或者是返回值为数组的方法。
	
print和println的区别是：println打印的时候自带了换行，下一次在打印的时候从下一行开始打印。
print不换行，下次打印的时候在这次打印的东西后面直接打印。

	break关键字：主要用在循环语句或者switch语句中
	continue和c语言中差不多
	if else判断和c语言差不多
	switch语句和c语言差不多