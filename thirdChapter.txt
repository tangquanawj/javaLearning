面向对象编程：需要长时间的淬炼。90%的是需要记住。

面向过程:在方法上复用。
面向过程：在类和方法上复用。
面向对象更加强调运用人类在日常的思维逻辑中经常采用的思想方法和类。
继承关系：
聚合关系：
实现关系：
多态：

对象是java程序的核心
java可以看成是静态属性和动态属性的封装体。
JDK提供了很多类。编程人员也可定义自已的类。
成员变量 属性  
方法    函数

为什么要用对象？
面向对象更加容易使我们达到这些年来苦苦追求的境界。
Reusable重用性
Extensibility扩展性
面向组件的编程：比面向对象还高一些的层次。

*********************************************
java类的定义：
用class关键字定义一个类：例如：
class Person {
	//成员变量
	private int id;
	private int age = 20;
	//方法定义
	public int getAge() {
		return age;
	}
	public void setAge(int i) {
		age = i;
	}
	public void setId() {

	}
}

java里面的变量：申明 赋值 使用
成员变量和局部变量的重要区别：定义成员变量的时候可以初始化，也可以不初始化
因为系统自定对其初始化。
默认初始化表：
byte   0
short   0
int   0
long  0L
char  "\u0000"
float 0.0F
double 0.0D
boolean false
所有引用类型   null

************************************************
java除了基本类型之外的变量类型都称之为引用类型。
java 中的对象都是通过引用调用的。
String s;
s = new String("Hello");
new出来的东西装在(heap)堆内存里面。引用类型全是指针。
javac：编译期间
java ：运行期间
对象创建的规则：
1、必须使用关键字new创建对象
2、使用对象.成员变量来引用对象的成员变量。
3、使用对象.方法来调用对象的方法
4、同一类的每一个对象有不同的成员变量存储空间。
5、同一类的每个对象共享该类的方法。方法只有执行的时候才分配空间。
*****************************************************
构造方法：(构造函数)：和类名字方法，且不能有返回值。
例如：
public class Demo {
	int id;
	int age = 20;
	Demo(int _id, int _age){
		id = _id;
		age = _age;
	}
}
规则：和类名一样不能有返回值，甚至连不能写void。
构造方法的作用：用来初始化对象。
Demo demo = new Demo(1,25);
1、使用new+构造方法  创建一个新的对象
方法调用完之后，方法的内存释放。
当没有指定构造函数的时候，编译器默认自动添加构造方法。类成员变量默认初始值为0。

***************************
类名的首字母应该大写
变量名和方法的名字首字母应该小写。
运用驼峰式标识。你懂的！。
*****************************************
函数重载和内存解析：
函数重载：函数名相同，形式参数不同。和c++的差不多。
构造方法也可以构成重载。
非静态方法(方法前面没有static关键字)是针对每个对象进行调用。

*********************************
this关键字：this是一个引用，指向自身的引用。this可以看做是一个变量，值是当前对象的引用。指向当前对象。
原则：
demo：
public class Leaf {
	int i = 0；//成员变量
	Leaf(int i) {this.i = i;} //形参
	Leaf increament(){
		i++;
		return this; //返回指向自身的引用。
	}
	void print () {
		System.out.println(i);
	}

	public static void main(String[] args)  {
		Leaf leaf = new Leaf(100);
		leaf.increament().increament().print();//
	}
}
***********************************************************

**********************************************************
static 声明的成员变量只有一份。
如果不申明static，那么每new一次，就有一个成员变量。如果用static申明的话，
那么声明的成员变量在内存中只有一份，不会出现多个。
static申明的变量存在data seg 中。static属于类的变量，不属于单独某个对象，所以不new对象也会有static申明的变量。
任何对象都可以访问这个。
如果不创建对象，那么可以用 类名.变量名 直接关联这个变量。
如：System.out的out，肯定是一个static变量。
字符串也是一种引用类型。

static 申明的方法称为静态方法，在static方法中，不能访问非static成员。即使不new对象，也可以通过类名+方法使用这个方法。
再次强调，在static方法中，不能访问非static成员。
**********************************************************************

********************************************************************
package和import语句：
为了便于管理大型软件系统中数目众多的类，结局累的命名的命名冲突问题。
java引入包(package)机制，提供累的多重类命名空间。
给包取名的规则：
package com.bjsxt.java140//三层包
package com.bjsxt //两层包
package com //一层包
package pkg1[.pkg2{.pkg3}]

public class Cat {
	
}
package com.sxt;
解释为：该文件中所有的类位于.\com\sxt目录下 

如果将一个类打包，则使用该类时，必须使用该类的全名(例如：com.sxt.MyClass),Java编译器才会在找到该类。
也可以使用import在文件的开头引入要使用到的类。例如：
import com.sxt.MyClass;
import java.util.*;//引入java.util包中所有的类
... ... ... 
	MyClass myclass = new MyClass();//可以直接使用类名。
	可以不需要使用import语句直接使用java.lang包中的类。

***************************************
如果想要将一个类放入包中，在这类源文件第一句话写package。
必须保证该类的class文件位于正确的争取目录下：
com和class文件在同一文件夹下。
必须class文件的最上层包的父目录位于classpath下面。
执行一个类需要写全包名，
不同的项目使用不同的classpath，classpath在java中是比较麻烦的问题。
************************************************************************	
JDK中提供的包：除了java.lang类外，其他包需要引用。java.lang不需要引用。
打包指令：jar -cvf test.java *.*
java.lang:包含一些java语言的核心类。String类，System类//
java.awt
************************************************************************
*********************************************************************
类的继承：使用extends关键字实现。
通过继承，子类自动拥有了基类的所有成员(包括私有成员可继承下来了，只是不能访问，拥有私有变量所有权，没有使用权。)。
java只支持单继承，不支持多继承。
一个子类只能有一个基类，一个基类可以派生多个子类。
如果需要多重继承，可以使用接口。
子类比父类大。
*********************************************************************


 权限修饰符：
 1、public：都可以访问
 2、private：只有类内部可以访问。
 3、protected：类内部能访问，子可以访问，同一个包的内能访问
 4、default：同包和类内部可以访问。子类不可访问
 访问控制和c++的差不多。
 对于class的权限修饰符只可以用public 和default（前面没有具体说明即是defalut）
demo:
public class TestAccess {
	
}

class T {
	privat int i = 0;
}
************************************************
方法的重写：(注意区分重载overload)overwrite或者override
在子类中可以根据需要对从基类继承下来的方法进行重写。
重写方法必须和被重写方法具有相同方法名称、参数列表和返回值类型。
重写的方法不能拥有比被重写的方法拥有更严格的访问权限。
假如被重写的方法是protected，重写的方法就不能是private。因为private比protected拥有更严格的访问控制方法。
注意：当你重写方法时，使用 copy，防止错误！！！
注意！注意!注意！重要的事情说三遍！！！！！！！
************************************************

************************************************
super关键字：指向自身继承下来的父类。
this关键字：this指向自身
demo:
class FatherClass() {
	public int value;
	public void f() {
		value = 100;
		System.out.println(value);
	}
}

class ChildClass extends FatherClass {
	public int value;
	public void f() {
		super.f();//父类中f()函数
		value = 200;//子类中的value
		System.out.println(value);//输出子类中的value
		System.out.println(value);//输出子类中的value
		System.out.println(super.value);//super.value指的是父类中de的value
	}
}

public class　TestInherit() {
	
	public static void main(String[] args) {
		ChildClass cc = new ChildClass();
		cc.f();
	}
}
************************************************

************************************************
继承中的构造方法：
子类的构造过程中 “必须” 调用其基类的构造方法：
	1、子类可以在自己的构造方法中使用 super(argument_list)调用基类的构造方法。因为构造函数可以重载，用这种方式可以选择使用哪种构造方法。
	同理，子类也可以使用this(argument_list)调用本类的另外的构造方法。
	如果调用了super，必须写在子类构造方法的第一行。不能先写自己的构造方法。
	2、如果子类的构造方法没有显示地调用基类构造方法，则系统默认调用基类
	无参数的构造方法。
	3.如果子类的构造方法没有显示的调用基类构造方法，儿而系统又乜有无参数的构造方法，则编译出错。这个过程不会默认
Demo：
class SuperClass() {
	private int n;

	SuperClass() {
		System.out.println("SuperClass()");
	}

	SuperClass(int n) {
		System.out.println("SuperClass(" + n + ")");
		this.n = n;
	}
}

class SubClass extends SuperClass {
	private int n;

	SubClass(int n) {
		System.out.println("SubClass(" + n + ")");
		this.n = n;
	}

	SubClass() {
		super(300);
		System.out.println("SubClass()");
	}
}

public class TestSuperSub {
	
	public static void main(String[] args) {
		SubClass sc2 = new SubClass(400);
	}
}
************************************************


************************************************
Object类是所有java类的根基型：





************************************************
Object类的toString()方法：一般建议子类继承了Object后重写toString()方法。
demo:
package com.tangquan.test;

public class TestToString {
	public static void main(String[] args) {
		Dog dog = new Dog();
		System.out.print(dog.toString());
	}
}

class Dog {
	
}

结果：Dog@2a139a55
类名后面是哈希码，类似于类名的编码。

关于哈希码的解释：在内存中有很多class类，于是java虚拟机中有一张哈希表，
这张哈希表，记录每一个哈希编码，对应着每个类。每个类都有一个独一无二的哈希编码。

************************************************


************************************************
Object 的equals方法：

************************************************

************************************************
只需要申明，不需要实现的方法称为抽象方法。抽象方法就是用来被重写的。abstract
当一个类中有抽象方法时，这个类就是抽象类。子类继承抽象类必须重写这个方法或继续申明子类为abstract类。
抽象类不能new出对象。即抽象类不能实例化对象。抽象方法必须重写。
抽象方法只需申明，不需要实现。

************************************************
 
 final关键的字：
 final的类不能被继承
 final的变量不能被重新复制
 final的方法不能被重写。
 public class TestFinal {
 	public static void main(String[] args) {
 		T t = new T();
 		t.i = 9;//错误，final变量不能被改变值。即使是t.i=8，也不能被编译通过。相当于c++中的const。
 	}
 }

final class T {
	final int i = 8;
	public void m(final int j) {
		j = 9;//形参定义为final后，不允许在方法中改变这个形参的值。
	}
	public final void m1() {

	}
}
class TT extends T { //T是final，不能被继承。
	public void m1() {

	}//错误，因为final方法不能被继承和重写。
}

String是final的类
Math类也是final类。
Boolean也是final类。
**********************************************************
面向对象的最后一个知识点：interface接口。
接口是抽象方法和常量值定义的集合。
从本质讲，接口是一个特殊的抽象类，这种抽象类中只包含常量和方法的定义，而没有变量和方法的实现。特殊的是接口不写abstract，但所有的方法都是abstract
例子：
public interface Runner {
	public static final int id = 1;
	public void start();
	public void run();
	public voim strop();
}
接口的特性：
1、接口可以多重实现。一个类可以实现多继承了。
2、接口中申明的属性默认是public static final。即使不写，也是这个。
3、接口中只能定义抽象方法(即只有函数的申明，没有函数的实现)，而且这些方法默认为public的、也只能是public的；
4 、接口可以继承，并添加新的属性和方法。
例子demo：
interface Singer {
	public sing();
	public sleep();
}

class Student implements Singer { //因为Singer是接口，不能用extends，而用implement
	private String name;
	student (String name) {
		this.name = name;
	}
	public void study() {
		System.out.println("studying");
	}
	public String getName() {return name;}
	public void sing(){
		System.out.println("Student is singing");
	}
	public void sleep(){
		System.out.println("Student is sleeping");
	}
}
类可以从别的地方继承，也可以对接口进行实现。
例子demo1:
interface Singer{
	public void sing();
	public void sleep();
}
interface Painter{
	private void paint(){};
	public String eat(){};
}

class Student implements Singer,Painter {
	private String name;
	Student(String name) {this.name = name;}
	public void study(){System.out.println("Studying");}
	public String getName() {return name;}
	public void sing(){
		System.out.println("Student is singing");
	}
	public void sleep(){
		System.out.println("Student is sleeping");
	}
}

public class Test{
	public static void main(String[] args) {
		Singer s1 = new Student("le");//接口和继承类之间存在多态性。
		s1.sing();
		s1.sleep();
		Singer s2 = new Teacher("steven");
		s2.sing();
		s2.sleep();
		Painter p1 = (Painter) s2;//p1当成painter来看。p1只看得到paint和eat，不能看到sing和sleep方法。
		p1.paint();
		p1.eat();
	}
}
多个无关的类可以实现同一个接口。
同一个类可以实现多个接口，所有的方法必须全部实现。
还可以定义接口类型的对象。

***************************
总结：
内存分析贯穿始终
对象和类的概念
类(对象)之间的关系
面向对象设计思想。
class
new
引用的概念
构造方法的概念
方法重载
构造方法重载
this
static




