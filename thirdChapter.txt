面向对象编程：需要长时间的淬炼。90%的是需要记住。

面向过程:在方法上复用。
面向过程：在类和方法上复用。
面向对象更加强调运用人类在日常的思维逻辑中经常采用的思想方法和类。
继承关系：
聚合关系：
实现关系：
多态：

对象是java程序的核心
java可以看成是静态属性和动态属性的封装体。
JDK提供了很多类。编程人员也可定义自已的类。
成员变量 属性  
方法    函数

为什么要用对象？
面向对象更加容易使我们达到这些年来苦苦追求的境界。
Reusable重用性
Extensibility扩展性
面向组件的编程：比面向对象还高一些的层次。

*********************************************
java类的定义：
用class关键字定义一个类：例如：
class Person {
	//成员变量
	private int id;
	private int age = 20;
	//方法定义
	public int getAge() {
		return age;
	}
	public void setAge(int i) {
		age = i;
	}
	public void setId() {

	}
}

java里面的变量：申明 赋值 使用
成员变量和局部变量的重要区别：定义成员变量的时候可以初始化，也可以不初始化
因为系统自定对其初始化。
默认初始化表：
byte   0
short   0
int   0
long  0L
char  "\u0000"
float 0.0F
double 0.0D
boolean false
所有引用类型   null

************************************************
java除了基本类型之外的变量类型都称之为引用类型。
java 中的对象都是通过引用调用的。
String s;
s = new String("Hello");
new出来的东西装在(heap)堆内存里面。引用类型全是指针。
javac：编译期间
java ：运行期间
对象创建的规则：
1、必须使用关键字new创建对象
2、使用对象.成员变量来引用对象的成员变量。
3、使用对象.方法来调用对象的方法
4、同一类的每一个对象有不同的成员变量存储空间。
5、同一类的每个对象共享该类的方法。方法只有执行的时候才分配空间。
*****************************************************
构造方法：(构造函数)：和类名字方法，且不能有返回值。
例如：
public class Demo {
	int id;
	int age = 20;
	Demo(int _id, int _age){
		id = _id;
		age = _age;
	}
}
规则：和类名一样不能有返回值，甚至连不能写void。
构造方法的作用：用来初始化对象。
Demo demo = new Demo(1,25);
1、使用new+构造方法  创建一个新的对象
方法调用完之后，方法的内存释放。
当没有指定构造函数的时候，编译器默认自动添加构造方法。类成员变量默认初始值为0。

***************************
类名的首字母应该大写
变量名和方法的名字首字母应该小写。
运用驼峰式标识。你懂的！。
*****************************************
函数重载和内存解析：
函数重载：函数名相同，形式参数不同。和c++的差不多。
构造方法也可以构成重载。
非静态方法(方法前面没有static关键字)是针对每个对象进行调用。

*********************************
this关键字：this是一个引用，指向自身的引用。this可以看做是一个变量，值是当前对象的引用。指向当前对象。
原则：
demo：
public class Leaf {
	int i = 0；//成员变量
	Leaf(int i) {this.i = i;} //形参
	Leaf increament(){
		i++;
		return this; //返回指向自身的引用。
	}
	void print () {
		System.out.println(i);
	}

	public static void main(String[] args)  {
		Leaf leaf = new Leaf(100);
		leaf.increament().increament().print();//
	}
}
***********************************************************

**********************************************************
static 声明的成员变量只有一份。
如果不申明static，那么每new一次，就有一个成员变量。如果用static申明的话，
那么声明的成员变量在内存中只有一份，不会出现多个。
static申明的变量存在data seg 中。static属于类的变量，不属于单独某个对象，所以不new对象也会有static申明的变量。
任何对象都可以访问这个。
如果不创建对象，那么可以用 类名.变量名 直接关联这个变量。
如：System.out的out，肯定是一个static变量。
字符串也是一种引用类型。

static 申明的方法称为静态方法，在static方法中，不能访问非static成员。即使不new对象，也可以通过类名+方法使用这个方法。
再次强调，在static方法中，不能访问非static成员。
**********************************************************************

********************************************************************
package和import语句：
为了便于管理大型软件系统中数目众多的类，结局累的命名的命名冲突问题。
java引入包(package)机制，提供累的多重类命名空间。
给包取名的规则：
package com.bjsxt.java140//三层包
package com.bjsxt //两层包
package com //一层包
package pkg1[.pkg2{.pkg3}]

public class Cat {
	
}
package com.sxt;
解释为：该文件中所有的类位于.\com\sxt目录下 

如果将一个类打包，则使用该类时，必须使用该类的全名(例如：com.sxt.MyClass),Java编译器才会在找到该类。
也可以使用import在文件的开头引入要使用到的类。例如：
import com.sxt.MyClass;
import java.util.*;//引入java.util包中所有的类
... ... ... 
	MyClass myclass = new MyClass();//可以直接使用类名。
	可以不需要使用import语句直接使用java.lang包中的类。

***************************************
如果想要将一个类放入包中，在这类源文件第一句话写package。
必须保证该类的class文件位于正确的争取目录下：
com和class文件在同一文件夹下。
必须class文件的最上层包的父目录位于classpath下面。
执行一个类需要写全包名，
不同的项目使用不同的classpath，classpath在java中是比较麻烦的问题。
************************************************************************	
JDK中提供的包：除了java.lang类外，其他包需要引用。java.lang不需要引用。
打包指令：jar -cvf test.java *.*
java.lang:包含一些java语言的核心类。String类，System类//
java.awt
************************************************************************